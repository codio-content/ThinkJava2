workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add: |
                 See the example java code in the left pane. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
        - remove: 6
          position: 128
        - add: |
                  In the Hello World program, line 5 is a **print statement** that displays a message to the user. [Click here to view.](open_file code/ch01/Hello.java panel=0 ref="System" count=1)
                  [Click to remove the highlight.](open_file code/ch01/Hello.java panel=0)

          position: 133
        - remove: 5
          position: 151
        - add: |
                  This program defines one method named `main`. [Click to view.](open_file code/ch01/Hello.java panel=0 ref="static" count=1)
                  [Click to remove the highlight.](open_file code/ch01/Hello.java panel=0)

          position: 156
        - remove: 1
          position: 164
        - add: |
                  The program defines [a class (click to view)](open_file code/ch01/Hello.java panel=0 ref="public" count=1), called Hello. 
                  [Click to remove the highlight.](open_file code/ch01/Hello.java panel=0)

          position: 165
        - remove: 1
          position: 176
        - add: |
                  [This line (click) is a comment](open_file code/ch01/Hello.java panel=0 ref="//" count=1), which is a bit of English text that explains the code.
                  [Click to remove the highlight.](open_file code/ch01/Hello.java panel=0)

          position: 177
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Displaying Two Messages"
    type: section
    transformations:
        - remove: 1
          position: 278
        - add: |
                 For example, take a look at Hello2.java in the top left corner. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello2.java java -cp code/ch01/ Hello2 )

          position: 279
        - remove: 1
          position: 308
        - add: |
                 For example, take a look at Goodbye.java in the bottom left corner. [Click to view the print statement without the newline.](open_file code/ch01/Goodbye.java panel=1 ref="Goodbye," count=1)
                 [Click to remove the highlight.](open_file code/ch01/Goodbye.java panel=1)
                 To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Goodbye.java java -cp code/ch01/ Goodbye )

          position: 309
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello2.java"
            panel: 0
            action: open
          - path: "code/ch01/Goodbye.java"
            panel: 1
            action: open
  - name: "Formatting Source Code"
    type: section
    transformations:
        - remove: 1
          position: 348
        - add: |
                 For example, the code to the upper left is legal. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/1/Goodbye.java java -cp code/1/ Goodbye )

          position: 350
        - remove: 1
          position: 360
        - add: |
                 So even the code on the lower left is legal. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/2/Goodbye.java java -cp code/2/ Goodbye )

          position: 362
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/1/Goodbye.java"
            panel: 0
            action: open
          - path: "code/2/Goodbye.java"
            panel: 1
            action: open
  - name: "Using Escape Sequences"
    type: section
    transformations:
        - remove: 1
          position: 404
        - add: |
                 You just have to tell Java where to put the line breaks. For example, take a look at [line 4 on the code on the left (click).](open_file code/ch01/Hello3.java panel=0 ref="System" count=1)
                 [Click to remove the highlight.](open_file code/ch01/Hello3.java panel=0)
                 To compile and run the code, comment out line 5 using a `//` and press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello3.java java -cp code/ch01/ Hello3 1)

          position: 405
        - remove: 5
          position: 448
        - add: |
                 For example, to write quotation marks inside of strings, you need to escape them with a backslash, as in [line 5](open_file code/ch01/Hello3.java panel=0 ref="println" count=1) on the code on the left. 
                 [Click to remove the highlight.](open_file code/ch01/Hello3.java panel=0)
                 To compile and run the code, remove the comment from line 5, comment out line 4 using a `//` and press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello3.java java -cp code/ch01/ Hello3 2)

          position: 453
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello3.java"
            panel: 0
            action: open
  - name: "What Is Computer Science?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Debugging Programs"
    type: section
    transformations:
        - remove: 3
          position: 500
        - add: |
                 When presented with code examples within this book, be sure to experiment with variations in the code in order to get the full picture of how a given language feature, code snippet, or solution works. 

          position: 505
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
    transformations:
        - remove: 68
          position: 668
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercise 1.1"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercise 1.2"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello4.java"
            panel: 0
            action: open
  - name: "Exercise 1.3"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
  - name: "Creating Arrays"
    type: section
  - name: "Accessing Elements"
    type: section
  - name: "Displaying Arrays"
    type: section
  - name: "Copying Arrays"
    type: section
  - name: "Traversing Arrays"
    type: section
  - name: "Random Numbers"
    type: section
  - name: "Building a Histogram"
    type: section
  - name: "The Enhanced for Loop"
    type: section
  - name: "Counting Characters"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
  - name: "Recursive Stack Diagrams"
    type: section
  - name: "Value-Returning Methods"
    type: section
  - name: "The Leap of Faith"
    type: section
  - name: "Counting Up Recursively"
    type: section
  - name: "Binary Number System"
    type: section
  - name: "Recursive Binary Method"
    type: section
  - name: "CodingBat Problems"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
insert_sections: 
  - name: Exercise 1.1
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    markdown: |

      Computer scientists have the annoying habit of using common English words to mean something other than their common English meanings.
      For example, in English, statements and comments are the same thing, but in programs they are different.



      {Submit Answer!|assessment}(free-text-3657199918)
      {Submit Answer!|assessment}(free-text-3293046330)
      {Submit Answer!|assessment}(free-text-3590859974)
      {Submit Answer!|assessment}(free-text-1108820771)

  - name: Exercise 1.2
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    markdown: |

      Before you do anything else, make sure you know how to run a Java program within the platform.

      * At the left is the Hello World program from the beginning of this chapter. Press the "Run!" and make sure it works.
        {Run!}(sh .guides/bg.sh javac code/ch01/Hello4.java java -cp code/ch01/ Hello4 1)

      * Add a print statement that displays a second message after the `Hello, World!`.
        Say something witty like, `How are you?`.
        Press the "Run!" to see how it worked.
        {Run!}(sh .guides/bg.sh javac code/ch01/Hello4.java java -cp code/ch01/ Hello4 2)

      * Add a comment to the program (anywhere).
        Press the "Run!" to see how it worked.
        {Run!}(sh .guides/bg.sh javac code/ch01/Hello4.java java -cp code/ch01/ Hello4 3)
        The new comment should not affect the result.

      This exercise may seem trivial, but it is the starting place for many of the programs we will work with.
      To debug with confidence, you will need to have confidence in your programming environment.

      In some environments, it is easy to lose track of which program is executing.
      You might find yourself trying to debug one program while you are accidentally running another.
      Adding (and changing) print statements is a simple way to be sure that the program you are looking at is the program you are running. 
      
  - name: Exercise 1.3
    type: section
    chapter: Computer programming
    section: Exercises
    before: false
    markdown: | 
      It is a good idea to commit as many errors as you can think of, so that you see what error messages the compiler produces.
      Sometimes the compiler tells you exactly what is wrong, and all you have to do is fix it.
      But sometimes the error messages are misleading.
      Over time you will develop a sense for when you can trust the compiler and when you have to figure things out yourself.

      Starting with the Hello World program, try out each of the following errors.
      After you make each change, compile the program, read the error message (if there is one), and then fix the error.

      * Remove one of the opening curly braces.
      * Remove one of the closing curly braces.
      * Instead of `main`, write `mian`.
      * Remove the word `static`.
      * Remove the word `public`.
      * Remove the word `System`.
      * Replace `println` with `Println`.
      * Replace `println` with `print`.
      * Delete one parenthesis.
      * Add an extra parenthesis.
      
      Press the "Run!" to see how these changes, and any others you can think of, work.
      {Run!}(sh .guides/bg.sh javac code/ch01/Hello4.java java -cp code/ch01/ Hello4 3)